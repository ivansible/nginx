---
- name: create script for updating squid ssl bundle
  ansible.builtin.copy:
    dest: "{{ cert_update_script }}"
    owner: root
    group: root
    mode: 0750
    content: |
      #!/bin/sh
      # squid certificate update hook
      # ansible-managed
      cat "{{ ssl_cert }}" "{{ ssl_key }}" > "{{ lecert_bundle }}" && \
      chown "root:{{ squid_group }}" "{{ lecert_bundle }}" && \
      chmod 0640 "{{ lecert_bundle }}" && \
      systemctl restart squid
  ## a change in the script denotes ssl configuration change
  register: _squid_cert_script

- name: directory for letsencrypt post-renewal hooks
  ansible.builtin.file:
    path: "{{ certbot_post_dir }}"
    state: directory
    mode: 0755

- name: link a letsencrypt post-renewal hook for squid
  ansible.builtin.file:
    state: link
    src: "{{ cert_update_script }}"
    dest: "{{ certbot_post_dir }}/squid"
  ignore_errors: "{{ ansible_check_mode }}"

- name: find modification times of squid ssl files
  ansible.builtin.stat:
    path: "{{ item }}"
  loop:
    - "{{ lecert_bundle }}"
    - "{{ ssl_cert }}"
    - "{{ ssl_key }}"
  register: _squid_lecert

- name: update squid pem file if it's stale
  ansible.builtin.shell:
    cmd: cat "{{ ssl_cert }}" "{{ ssl_key }}" > "{{ lecert_bundle }}"
  when: _squid_cert_script is changed
        or not _squid_lecert.results.0.stat.exists
        or _squid_lecert.results.0.stat.ctime < _squid_lecert.results.1.stat.ctime
        or _squid_lecert.results.0.stat.ctime < _squid_lecert.results.2.stat.ctime

- name: ensure squid pem file permissions
  ansible.builtin.file:
    path: "{{ lecert_bundle }}"
    state: file
    owner: root
    group: "{{ squid_group }}"
    mode: 0640
  ignore_errors: "{{ ansible_check_mode }}"
...
