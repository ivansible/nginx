---
- name: assert parameter validity
  assert:
    that: sslh_transparent_setcap in ['enable', 'disable', 'ignore']

- name: install sslh package 1.18 from bionic on xenial
  # with original xenial's sslh 1.17 an attempt of ssh transparent
  # proxying for a local process (e.g. shadowsocks) fails with error
  # "bind:98:Address already in use"
  # issue description: https://github.com/yrutschle/sslh/issues/64
  # fixed in sslh 1.18 by PR https://github.com/yrutschle/sslh/pull/69
  apt:
    deb: http://mirrors.kernel.org/ubuntu/pool/universe/s/sslh/sslh_1.18-1_amd64.deb
  when: ansible_lsb.codename == 'xenial'

- name: install sslh package on bionic+
  apt:
    name: sslh
    state: present
  when: ansible_lsb.codename == 'bionic'

- name: add dual ipv4/ipv6 localhost in /etc/hosts as sslh target
  blockinfile:
    path: /etc/hosts
    block: |
      127.0.0.1 localhost4or6
      ::1       localhost4or6
    marker: "# {mark} dual-stack target for sslh"
  notify: restart sslh service

- name: create sslh config file
  template:
    src: sslh.cfg
    dest: /etc/sslh.cfg
    owner: root
    group: sslh
    mode: 0640
  notify: restart sslh service

- name: override sslh service settings
  template:
    src: sslh.service
    dest: /etc/systemd/system/sslh.service
    owner: root
    group: root
    mode: 0644
  notify: restart sslh service

- name: configure helper parameters for sslh
  blockinfile:
    path: /etc/default/sslh
    block: |
      LOOKUP_TABLE={{ sslh_lookup_table }}
      MARK_VALUE={{ sslh_mark_value }}
      MARK_MASK={{ sslh_mark_mask }}
      USE_TRANSPARENT={{ sslh_transparent |bool |to_json }}
      # TRANSPARENT_SETCAP must be one of: enable, disable, ignore
      TRANSPARENT_SETCAP={{ sslh_transparent_setcap }}
    marker: "# {mark} sslh helper parameters"
  notify: restart sslh service

- name: install iptables helper for sslh
  copy:
    src: iptables-helper.sh
    dest: /usr/local/sbin/sslh-helper-iptables.sh
    owner: root
    group: root
    mode: 0754
  notify: restart sslh service

- name: open https port for sslh
  ufw:
    rule: allow
    port: "443"
    proto: tcp
  no_log: true

- name: enable and start sslh service (will be rescued if it fails)
  systemd:
    name: sslh
    state: started
    enabled: yes
  register: sslh_service_start_result

- name: determine whether nginx service runs (and possibly blocks ssl port)
  service_facts:
  # note: condition "ActiveState == 'failed'" is not enough
  when: sslh_service_start_result.status.ActiveState != 'active'

- name: let sslh service start when nginx blocks ssl port due to stale settings
  block:
    - name: prevent pending sslh restart before nginx gets reconfigured
      meta: flush_handlers

    - name: stop nginx to unblock bound ssl port (will restart after reconfiguration)
      systemd:
        name: nginx
        state: stopped
      register: nginx_service_stop_result
      # make few attempts until nginx really stops
      until: nginx_service_stop_result.status.ActiveState != 'active'
      notify: restart nginx service
      # sometimes change is not detected but we know for sure nginx was running
      changed_when: true

    - name: pause a little to let ssl port go free in background
      pause:
        seconds: 3

    - name: start sslh service once again after stopping nginx
      systemd:
        name: sslh
        # perform restart instead of start to override stuck service state
        state: started
        enabled: yes

  when: sslh_service_start_result.status.ActiveState != 'active'
        and ansible_facts.services.nginx is defined
        and ansible_facts.services.nginx.state == 'running'
...
