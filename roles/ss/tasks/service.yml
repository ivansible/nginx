---
- name: merge arguments with defaults
  ansible.builtin.set_fact:
    args: "{{ srv_ss_defaults | combine(item) }}"

- name: validate plugin type
  ansible.builtin.assert:
    that: args.plugin in ['none', 'obfs', 'v2ray']

- name: configure shadowsocks service [{{ args.name }}]
  ansible.builtin.template:
    src: ss-config.json
    dest: /etc/shadowsocks-libev/{{ filename }}.json
    owner: root
    mode: 0644
  vars:
    filename: "{{ (args.name == 'default') |ternary('config', args.name) }}"
  register: ss_config_file


- name: derive systemd service name
  ansible.builtin.set_fact:
    svc_name: "shadowsocks-libev{{ (args.name == 'default') |ternary('', '-server@' + args.name) }}"

- name: temporarily stop shadowsocks service after fresh install
  ## note: this step is a workaround.
  ##       without this "recycling" the service might end up disabled.
  ansible.builtin.systemd:
    name: "{{ svc_name }}"
    state: stopped
    enabled: false
    daemon_reload: true
  when: ss_install_result is changed

- name: enable shadowsocks service [{{ args.name }}]
  ansible.builtin.systemd:
    name: "{{ svc_name }}"
    state: started
    enabled: true
    daemon_reload: true

- name: restart shadowsocks service [{{ args.name }}]
  ansible.builtin.systemd:
    name: "{{ svc_name }}"
    state: restarted
    daemon_reload: true
  when: ss_config_file is changed
        or ss_proxyfix_result is changed
        or ss_kernelfix_result is changed


- name: open shadowsocks port in ufw [{{ args.name }}]
  community.general.ufw:
    port: "{{ args.port |string }}"
    rule: "{{ args.direct |bool |ternary('allow','deny') }}"
  no_log: "{{ hide_secrets |bool }}"
  when: lin_firewall == 'ufw'

- name: open shadowsocks port in ferm [{{ args.name }}]
  ivansible.base.ferm_port:
    port: "{{ args.port }}"
    zone: "{{ args.direct |bool |ternary('external','internal') }}"
    solo_zone: true
    comment: "shadowsocks {{ args.name }}"
  tags: skip_ansible_lint
  when: lin_firewall == 'ferm'
...
