---
- name: merge arguments with defaults
  set_fact:
    args: "{{ lin_ss_defaults | combine(item) }}"

- name: validate plugin type
  assert:
    that: args.plugin in ['none', 'obfs', 'v2ray']

- name: configure shadowsocks service [{{ args.name }}]
  template:
    src: ss-config.json
    dest: /etc/shadowsocks-libev/{{ filename }}.json
    owner: root
    mode: 0644
  vars:
    filename: "{{ (args.name == 'default') |ternary('config', args.name) }}"
  register: ss_config_file


- name: derive systemd service name
  set_fact:
    svc_name: "{{ 'shadowsocks-libev' +
      (args.name == 'default') |ternary('', '-server@' + args.name) }}"

- name: temporarily stop shadowsocks service after fresh install
  # note: this step is a workaround.
  #       without this "recycling" the service might end up disabled.
  systemd:
    name: "{{ svc_name }}"
    state: stopped
    enabled: no
    daemon_reload: yes
  when: ss_install_result is changed

- name: enable shadowsocks service [{{ args.name }}]
  systemd:
    name: "{{ svc_name }}"
    state: started
    enabled: yes
    daemon_reload: yes

- name: restart shadowsocks service [{{ args.name }}]
  systemd:
    name: "{{ svc_name }}"
    state: restarted
    daemon_reload: yes
  when: ss_config_file is changed
        or ss_proxyfix_result is changed
        or ss_kernelfix_result is changed


- name: open shadowsocks port in ufw [{{ args.name }}]
  ufw:
    port: "{{ args.port |string }}"
    rule: "{{ args.direct |bool |ternary('allow','deny') }}"
  no_log: "{{ hide_secrets |bool }}"
  when: lin_firewall == 'ufw'

- name: open shadowsocks port in ferm [{{ args.name }}]
  ferm_port:
    port: "{{ args.port }}"
    domain: "{{ args.direct |bool |ternary('external','internal') }}"
    exclusive: true
    comment: "shadowsocks {{ args.name }}"
  tags: skip_ansible_lint
  when: lin_firewall == 'ferm'
...
